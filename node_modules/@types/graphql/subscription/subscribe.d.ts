import { GraphQLSchema } from '../type/schema';
import { DocumentNode } from '../language/ast';
import { GraphQLFieldResolver } from '../type/definition';
import { ExecutionResult } from '../execution/execute';

interface AsyncIterator<T> {
   next(value?: any): Promise<IteratorResult<T>>
   return?(value?: any): Promise<IteratorResult<T>>
   throw?(e?: any): Promise<IteratorResult<T>>
 }
 
 interface AsyncIterable<T> {
     [key: string]: AsyncIterator<T>
 }

export function subscribe(
    schema: GraphQLSchema,
    document: DocumentNode,
    rootValue?: any,
    contextValue?: any,
    variableValues?: {
        [key: string]: any;
    },
    operationName?: string,
    fieldResolver?: GraphQLFieldResolver<any, any>,
    subscribeFieldResolver?: GraphQLFieldResolver<any, any>
): AsyncIterator<ExecutionResult>;

export function createSourceEventStream(
    schema: GraphQLSchema,
    document: DocumentNode,
    rootValue?: any,
    contextValue?: any,
    variableValues?: {
        [key: string]: any;
    },
    operationName?: string,
    fieldResolver?: GraphQLFieldResolver<any, any>
): AsyncIterable<any>
